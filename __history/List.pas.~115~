unit List;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf, FireDAC.Stan.Def,
  FireDAC.Stan.Pool, FireDAC.Stan.Async, FireDAC.Phys, FireDAC.Phys.SQLite,
  FireDAC.Phys.SQLiteDef, FireDAC.Stan.ExprFuncs, FireDAC.VCLUI.Wait,
  FireDAC.Stan.Param, FireDAC.DatS, FireDAC.DApt.Intf, FireDAC.DApt, Data.DB,
  Vcl.Grids, Vcl.DBGrids, FireDAC.Comp.DataSet, FireDAC.Comp.Client,
  Vcl.StdCtrls, Vcl.ExtCtrls, consts;

type
  TFormList = class(TForm)
    Label1: TLabel;
    ButtonPushRegister: TButton;
    FDQueryProductDelete: TFDQuery;
    ButtonEdit: TButton;
    ButtonDelete: TButton;
    FDConnectionSQLite: TFDConnection;
    StringGridProduct: TStringGrid;
    FDTableProducts: TFDTable;
    procedure ButtonPushRegisterClick(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure ButtonEditClick(Sender: TObject);
    procedure ButtonDeleteClick(Sender: TObject);

  private
    //Private vars
  public
    procedure StringGridSetup();
  end;

var
  FormList: TFormList;

implementation

{$R *.dfm}

uses Register, Edit;

procedure TFormList.ButtonDeleteClick(Sender: TObject);
var
  IdRow: Integer;
  confirmDialog: Integer;
  id: string;
begin
  IdRow := StringGridProduct.Selection.Top;

  if IdRow > 0 then
  begin
    id := StringGridProduct.Cells[0, IdRow];
    //translate button mensage
    TFormRegister.SetResourceString(@SMsgDlgYes, 'Sim');
    TFormRegister.SetResourceString(@SMsgDlgNo, 'Não');

    // Show a re-register dialog
    confirmDialog := messagedlg('Deseja excluir o produto com código: ' + id + '?',
      mtInformation, [ mbYes, mbNO ], 0);

    // Show the button type selected
    if confirmDialog = 6  then
    begin
      FDQueryProductDelete.Params.ParamByName('id').Value := id;
      FDQueryProductDelete.ExecSQL;
      ShowMessage('Produto excluido com sucesso!');
      StringGridSetup()
    end;
  end;
end;

procedure TFormList.ButtonEditClick(Sender: TObject);
var
  IdRow: Integer;
begin
  IdRow := StringGridProduct.Selection.Top;

  if IdRow > 0 then
  begin
    try
      Application.CreateForm(TFormEdit, FormEdit);
      FormEdit.Id := StringGridProduct.Cells[0, IdRow];
      FormEdit.ShowModal;
    finally
      FormEdit.Release;
    end;
  end;
end;

procedure TFormList.ButtonPushRegisterClick(Sender: TObject);
begin
  try
    Application.CreateForm(TFormRegister, FormRegister);
    FormRegister.ShowModal;
  finally
    FormRegister.Release;
  end;
end;

procedure TFormList.FormShow(Sender: TObject);
begin
  StringGridSetup();
end;

procedure TFormList.StringGridSetup();
Var
  i: Integer;
  Button: TButton;
  R1: TRect;
  R2: TRect;
Begin
  //Connect to DB
  FDConnectionSQLite.Connected := True;

  //Execute Query
  FDTableProducts.Active := True;

  //Titles
  StringGridProduct.cells[0, 0] := 'Código';
  StringGridProduct.cells[1, 0] := 'Nome';
  StringGridProduct.cells[2, 0] := 'Descrição';
  StringGridProduct.cells[3, 0] := 'Em Estoque';
  StringGridProduct.cells[4, 0] := 'Preço';

  //Data of database SQLite
  i := 1;
  while not FDTableProducts.eof do
  begin
    StringGridProduct.cells[0, i] := FDTableProducts.FieldByName('id').Value;
    StringGridProduct.cells[1, i] := FDTableProducts.FieldByName('name').Value;
    StringGridProduct.cells[2, i] := FDTableProducts.FieldByName('descr').Value;
    StringGridProduct.cells[3, i] := FDTableProducts.FieldByName('stock').Value;
    StringGridProduct.cells[4, i] := FDTableProducts.FieldByName('price').Value;

    FDTableProducts.next;
    i := i + 1;
  end;

  //Set number of lines in Grid
  StringGridProduct.RowCount := i;

  //Close connections and Query
  FDTableProducts.Active := False;
  FDConnectionSQLite.Connected := False;
End;


end.
