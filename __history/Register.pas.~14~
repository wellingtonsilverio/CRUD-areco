unit Register;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, FireDAC.Stan.Intf,
  FireDAC.Stan.Option, FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf,
  FireDAC.Stan.Def, FireDAC.Stan.Pool, FireDAC.Stan.Async, FireDAC.Phys,
  FireDAC.Phys.SQLite, FireDAC.Phys.SQLiteDef, FireDAC.Stan.ExprFuncs,
  FireDAC.VCLUI.Wait, FireDAC.Stan.Param, FireDAC.DatS, FireDAC.DApt.Intf,
  FireDAC.DApt, Data.DB, FireDAC.Comp.DataSet, FireDAC.Comp.Client, Vcl.ComCtrls;

type
  TFormRegister = class(TForm)
    Label1: TLabel;
    Label2: TLabel;
    ButtonRegister: TButton;
    ButtonCancel: TButton;
    FDConnectionSQLite: TFDConnection;
    FDQueryProductInsert: TFDQuery;
    EditName: TEdit;
    RichEditDescr: TRichEdit;
    procedure ButtonCancelClick(Sender: TObject);
    procedure ButtonRegisterClick(Sender: TObject);
    function MyMessageDlg(CONST Msg: string; DlgTypt: TmsgDlgType; button: TMsgDlgButtons;
      Caption: ARRAY OF string; dlgcaption: string): Integer;
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  FormRegister: TFormRegister;

implementation

{$R *.dfm}

uses List;

procedure TFormRegister.ButtonCancelClick(Sender: TObject);
begin
  FormList.StringGridSetup();
  Close
end;

procedure TFormRegister.ButtonRegisterClick(Sender: TObject);
var
  confirmDialog : Integer;
begin
  FDQueryProductInsert.Params.ParamByName('name').Value := EditName.Text;
  FDQueryProductInsert.Params.ParamByName('descr').Value := RichEditDescr.Text;
  FDQueryProductInsert.ExecSQL;

  // Show a re-register dialog
  confirmDialog := messagedlg('Produto cadastrado com sucesso! deseja fazer outro cadastro?', mtInformation, [ mbYes, mbNO ], 0);

  // Show the button type selected
  if confirmDialog = 6  then
  begin
    EditName.Text := '';
    RichEditDescr.Text := '';
  end;
  if confirmDialog = 7 then FormList.Close;
end;

function MyMessageDlg(CONST Msg: string; DlgTypt: TmsgDlgType; button: TMsgDlgButtons;
  Caption: ARRAY OF string; dlgcaption: string): Integer;
var
  aMsgdlg: TForm;
  i: Integer;
  Dlgbutton: Tbutton;
  Captionindex: Integer;
begin
  aMsgdlg := createMessageDialog(Msg, DlgTypt, button);
  aMsgdlg.Caption := dlgcaption;
  aMsgdlg.BiDiMode := bdRightToLeft;
  Captionindex := 0;
  for i := 0 to aMsgdlg.componentcount - 1 Do
  begin
    if (aMsgdlg.components[i] is Tbutton) then
    Begin
      Dlgbutton := Tbutton(aMsgdlg.components[i]);
      if Captionindex <= High(Caption) then
        Dlgbutton.Caption := Caption[Captionindex];
      inc(Captionindex);
    end;
  end;
  Result := aMsgdlg.Showmodal;
end;

end.
